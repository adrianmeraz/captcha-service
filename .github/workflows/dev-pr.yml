name: Dev Feature Pull Request
on:
  pull_request:
    branches:
      - dev
    paths:
      - '**.py'
      - '**.yml'
      - 'Dockerfile'
      - 'poetry.lock'
      - 'pyproject.toml'

jobs:
  test:
    name: Pull Dependencies, Build, Test, Upload Coverage
    runs-on: ubuntu-latest
    env:
      APP_NAME:              ${{ github.event.repository.name }}
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENVIRONMENT:           dev
      GH_PAT:                ${{ secrets.GH_PAT }}
      SHARED_APP_NAME:       expatmagic
      TF_WORKDIR_PREFIX:     apps/${{ github.event.repository.name }}/environments
      TF_REPO:               'adrianmeraz/am-terraform'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    # Empty prefixes not supported yet, pending this PR: https://github.com/aws-actions/aws-secretsmanager-get-secrets/pull/16
    # Using EM for now
    - name: Get Secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      env:
        SSM_SECRET_ID: ${{ env.APP_NAME }}/${{ env.ENVIRONMENT }}/secret
      with:
        secret-ids: |
          EM,${{ env.SSM_SECRET_ID }}
        parse-json-secrets: true

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: ‘2’

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    # https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
    - name: Load cached Poetry via ~/.local
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/dev.yml') }}
        restore-keys: dotlocal-${{ runner.os }}-

    - name: Install / Load Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies via .venv
      id: cache-virtualenv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/dev.yml') }}
        restore-keys: venv-${{ runner.os }}-

    - name: Install / Load Poetry dependencies
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      run: poetry install

    - name: Run tests and generate Coverage Report
      run: |
        poetry run coverage run -m unittest
        poetry run coverage xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4-beta
      env:
        CODECOV_TOKEN: ${{ env.EM_CODECOV_TOKEN }}

    - name: Checkout Terraform Repo
      uses: actions/checkout@v4
      with:
        ref: main
        repository: ${{ env.TF_REPO }}
        token: ${{ env.GH_PAT }}

    - name: Set Terraform Working Directory
      run: |
        echo "TF_WORKDIR=${{ env.TF_WORKDIR_PREFIX }}/${{ env.ENVIRONMENT }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.1

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKDIR }}
      id: tf-init
      run: |
        terraform init

    - name: Terraform Plan
      working-directory: ${{ env.TF_WORKDIR }}
      id: tf-plan
      run: |
        terraform plan -input=false -parallelism=50 \
          -var app_name="${{ env.APP_NAME }}" \
          -var aws_access_key="${{ env.AWS_ACCESS_KEY_ID }}" \
          -var aws_region="${{ env.AWS_REGION }}" \
          -var aws_secret_key="${{ env.AWS_SECRET_ACCESS_KEY }}" \
          -var environment="${{ env.ENVIRONMENT }}" \
          -var shared_app_name="${{ env.SHARED_APP_NAME }}"
